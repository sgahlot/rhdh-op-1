apiVersion: rhdh.redhat.com/v1alpha1
kind: Backstage
metadata:
  name: rhdh-demo-test
spec:
  spec:
    application:
      image: registry.redhat.io/rhdh/rhdh-hub-rhel9:1.0-200
  database:
    enableLocalDb: true
    authSecretName: rhdh-db-secret
  application:
    replicas: 1
    appConfig:
      #mountPath:  /opt/app-root/src
      configMaps:
        - name: "rhdh-config-app"
        - name: "rhdh-config-backend"
        - name: "rhdh-config-auth"
        - name: "rhdh-config-catalog"

        # not needed here since the techdocs are pointing to "local" which is the default
        # but given as an example
        - name: "rhdh-config-others"
    dynamicPluginsConfigMapName: rhdh-dynamic-plugins
    extraEnvs:
      secrets:
        - name: "rhdh-secrets"
        #- name: "rhdh-secrets-private-file"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rhdh-config-app
data:
  app-config.app.yaml: |
    app:
      title: "RHDH AppEng demo"
      baseUrl: ${HOST_URL}
    
    integrations:
      github:
        - host: github.com
          token: ${GITHUB_TOKEN}
          #apps:
          #  - appId: ${GITHUB_APP_ID}
          #    clientId: ${GITHUB_APP_CLIENT_ID}
          #    clientSecret: ${GITHUB_APP_CLIENT_SECRET}
          #    webhookUrl: ${GITHUB_APP_WEBHOOK_URL}
          #    webhookSecret: ${GITHUB_APP_WEBHOOK_SECRET}
          #    privateKey: |
          #      ${GITHUB_APP_PRIVATE_KEY_FILE}


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rhdh-config-backend
data:
  app-config.backend.yaml: |
    backend:
      baseUrl: "${HOST_URL}"

      cors:
        origin: "${HOST_URL}"
        methods: [GET, HEAD, PATCH, POST, PUT, DELETE]

      auth:
        keys:
          - secret: "${BACKEND_SECRET}"


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rhdh-config-auth
data:
  app-config.auth.yaml: |
    auth:
      environment: development

      providers:
        github:
          development:
            clientId: ${AUTH_GITHUB_CLIENT_ID}
            clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}

        google:
          development:
            clientId: ${AUTH_GOOGLE_CLIENT_ID}
            clientSecret: ${AUTH_GOOGLE_CLIENT_SECRET}


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rhdh-config-catalog
data:
  app-config.catalog.yaml: |

    enabled:
      github: true
      githubOrg: true

    catalog:
      rules:
        - allow: [Component, System, Group, Resource, Location, Template, API, User, Domain]

      providers:
        githubOrg:
          githubUrl: "${GITHUB_ORG_URL}"
          #default:
          #  id: development
          #  orgUrl: "${GITHUB_ORG_URL}"
          #catalog.providers.githubOrg.githubUrl

        # Alternate way to specify github provider for GitHub auto discovery
        # currently, it is specified as part of the dynamic plugin
        #github:
        #  providerId:
        #    organization: appeng-backstage
        #    catalogPath: '/rhdh-discovery/catalog-info.yaml'
        #    filters:
        #      branch: 'main'
        #      repository: '*'
        #    schedule:
        #      frequency: { minutes: 5 }
        #      timeout: { minutes: 3 }

      locations:
        # Catalog and API entries - Janus entities
        - type: url
          target: https://github.com/janus-idp/backstage-showcase/blob/main/catalog-entities/all.yaml

        # All the templates (shows up in Create...) - Red Hat Developer Hub Software Templates location
        - type: url
          target: https://github.com/redhat-developer/red-hat-developer-hub-software-templates/blob/main/templates.yaml

        # ODO template for picking up Devfile stack
        #   (ODO == fast, iterative CLI tool for container based app dev)
        - type: url
          target: https://github.com/ododev/odo-backstage-software-template/blob/main/template.yaml

        # User catalog
        - type: url
          target: https://github.com/sgahlot/backstage-tutorial-nodejs/blob/master/catalog-user-info.yaml

        ## GitHub org catalog
        #- type: github-org
        #  target: "${GITHUB_ORG_URL}"
        #  rules:
        #    - allow: [User, Group]


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rhdh-config-others
data:
  app-config.others.yaml: |
    techdocs:
      builder: "local"
      generator:
        runIn: "local"
      publisher:
        type: "local"

    kubernetes:
      serviceLocatorMethod:
        type: 'multiTenant'
      clusterLocatorMethods:
        - type: 'config'
          clusters:
            - url: "${K8S_CLUSTER_URL}"
              name: rhdh-cluster-110022
              authProvider: 'serviceAccount'
              skipTLSVerify: true
              serviceAccountToken: ${K8S_SA_TOKEN}
              customerResources:
                - group: 'route.openshift.io'
                  apiVersion: 'v1'
                  plural: 'routes'
                - group: 'tekton.dev'
                  apiVersion: 'v1'
                  plural: 'pipelineruns'
                - group: 'tekton.dev'
                  apiVersion: 'v1'
                  plural: 'taskruns'



---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rhdh-dynamic-plugins
data:
  dynamic-plugins.yaml: |
    includes:
      - dynamic-plugins.default.yaml
    plugins:
      # Techdocs dynamic plugin(s)
      - package: './dynamic-plugins/dist/backstage-plugin-techdocs'
      - package: './dynamic-plugins/dist/backstage-plugin-techdocs-backend-dynamic'

      # GitHub organization plugin(s) - NOT YET WORKING - github-org catalog type is NOT working yet
      - package: './dynamic-plugins/dist/backstage-plugin-catalog-backend-module-github-org-dynamic'
        disabled: false
      - package: './dynamic-plugins/dist/backstage-plugin-catalog-backend-module-github-dynamic'
        disabled: false

      # K8s dynamic plugin
      - package: './dynamic-plugins/dist/backstage-plugin-kubernetes'
        disabled: false
      - package: './dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic'
        disabled: false
      # Topology plugin to visualize k8s resources, e.g. Deployment, Job, Pods etc.
      - package: './dynamic-plugins/dist/janus-idp-backstage-plugin-topology'
        disabled: false


      # GitHub auto discovery dynamic plugin
      - package: './dynamic-plugins/dist/backstage-plugin-catalog-backend-module-github-dynamic'
        disabled: false
        pluginConfig:
          catalog:
            providers:
              github:
                appengBackstage:
                  # It is going to auto-discover the GitHub repo specivied by the organization below
                  organization: '${GITHUB_ORG}'
                  schedule:
                    # supports cron, ISO duration, "human duration" (used below)
                    frequency: { minutes: 600}
                    # supports ISO duration, "human duration (used below)
                    timeout: { minutes: 3}
                    initialDelay: { seconds: 15}

